name: Convert Scripts

on:
  push:
    branches: [ main ]
    paths:
      - 'QuantumultX/*.js'
  pull_request:
    branches: [ main ]
    paths:
      - 'QuantumultX/*.js'
  workflow_dispatch:  # Allow manual triggering

# Add explicit permissions for the GITHUB_TOKEN
permissions:
  contents: write

jobs:
  convert:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      
      - name: Create basic converter script
        run: |
          mkdir -p tools
          cat > tools/convert.js << 'EOF'
          const fs = require('fs');
          const path = require('path');

          function convertToSurge(content, inputFile) {
            // Extract filename for naming
            const filename = path.basename(inputFile, '.js');
            
            // Extract metadata from script if available
            let name = filename;
            let desc = 'Converted from QuantumultX';
            
            const nameMatch = content.match(/[\/\*\s]*?name\s*=\s*['"]*(.+?)['"]*[\n\r]/i);
            const descMatch = content.match(/[\/\*\s]*?desc\s*=\s*['"]*(.+?)['"]*[\n\r]/i);
            
            if (nameMatch && nameMatch[1]) {
              name = nameMatch[1].trim().replace(/['"]/g, '');
            }
            
            if (descMatch && descMatch[1]) {
              desc = descMatch[1].trim().replace(/['"]/g, '');
            }
            
            // Create basic Surge module
            let moduleContent = `#!name=${name}\n`;
            moduleContent += `#!desc=${desc}\n\n`;
            
            // Convert $task.fetch to $httpClient equivalent if this is a script
            let scriptContent = content;
            
            if (content.includes('$task.fetch')) {
              scriptContent = content.replace(/\$task\.fetch/g, '$httpClient.get');
              
              moduleContent += `[Script]\n`;
              moduleContent += `${name.replace(/\s+/g, '_')} = type=cron,cronexp=0 0 * * *,script-path=${filename}.js,timeout=60,wake-system=1\n\n`;
              
              // Also include original QuantumultX content as comment
              moduleContent += `/*\nOriginal QuantumultX script preserved in ${filename}.js\n*/`;
              
              // No need to return the script content, it will be written separately
              return { module: moduleContent, script: scriptContent };
            }
            
            // For rewrite/rule files, maintain a simplified structure
            if (content.includes('hostname =')) {
              moduleContent += `[MITM]\n`;
              const hostnameMatch = content.match(/hostname\s*=\s*(.+?)(?:[\n\r]|$)/);
              if (hostnameMatch && hostnameMatch[1]) {
                moduleContent += `hostname = ${hostnameMatch[1].trim()}\n\n`;
              }
            }
            
            // Include original content as comment
            moduleContent += `/*\nOriginal QuantumultX content:\n\n${content}\n*/`;
            
            return { module: moduleContent, script: null };
          }

          function convertToLoon(content, inputFile) {
            // Extract filename for naming
            const filename = path.basename(inputFile, '.js');
            
            // Extract metadata from script if available
            let name = filename;
            let desc = 'Converted from QuantumultX';
            
            const nameMatch = content.match(/[\/\*\s]*?name\s*=\s*['"]*(.+?)['"]*[\n\r]/i);
            const descMatch = content.match(/[\/\*\s]*?desc\s*=\s*['"]*(.+?)['"]*[\n\r]/i);
            
            if (nameMatch && nameMatch[1]) {
              name = nameMatch[1].trim().replace(/['"]/g, '');
            }
            
            if (descMatch && descMatch[1]) {
              desc = descMatch[1].trim().replace(/['"]/g, '');
            }
            
            // Create basic Loon plugin
            let pluginContent = `#!name = ${name}\n`;
            pluginContent += `#!desc = ${desc}\n`;
            pluginContent += `#!author = Converted\n`;
            pluginContent += `#!icon = \n\n`;
            
            // Convert $task.fetch to $http equivalent if this is a script
            let scriptContent = content;
            
            if (content.includes('$task.fetch')) {
              scriptContent = content.replace(/\$task\.fetch/g, '$http.get');
              
              pluginContent += `[Script]\n`;
              pluginContent += `cron "${name}" script-path=${filename}.js,tag=${name.replace(/\s+/g, '_')},cronexp=0 0 * * *\n\n`;
              
              // Also include original QuantumultX content as comment
              pluginContent += `/*\nOriginal QuantumultX script preserved in ${filename}.js\n*/`;
              
              // No need to return the script content, it will be written separately
              return { plugin: pluginContent, script: scriptContent };
            }
            
            // For rewrite/rule files, maintain a simplified structure
            if (content.includes('hostname =')) {
              pluginContent += `[MITM]\n`;
              const hostnameMatch = content.match(/hostname\s*=\s*(.+?)(?:[\n\r]|$)/);
              if (hostnameMatch && hostnameMatch[1]) {
                pluginContent += `hostname = ${hostnameMatch[1].trim()}\n\n`;
              }
            }
            
            // Include original content as comment
            pluginContent += `/*\nOriginal QuantumultX content:\n\n${content}\n*/`;
            
            return { plugin: pluginContent, script: null };
          }

          // Main function
          function main() {
            const args = process.argv.slice(2);
            const inputArg = args.indexOf('--input');
            const outputDir = args.indexOf('--output-dir');
            const targetArg = args.indexOf('--target');
            
            if (inputArg === -1 || outputDir === -1 || targetArg === -1) {
              console.error('Usage: node convert.js --input <inputFile> --output-dir <outputDir> --target <surge|loon>');
              process.exit(1);
            }
            
            const inputFile = args[inputArg + 1];
            const outputDirectory = args[outputDir + 1];
            const target = args[targetArg + 1];
            
            if (!inputFile || !outputDirectory || !target) {
              console.error('Usage: node convert.js --input <inputFile> --output-dir <outputDir> --target <surge|loon>');
              process.exit(1);
            }
            
            try {
              const content = fs.readFileSync(inputFile, 'utf8');
              const filename = path.basename(inputFile, '.js');
              
              // Ensure output directory exists
              if (!fs.existsSync(outputDirectory)) {
                fs.mkdirSync(outputDirectory, { recursive: true });
              }
              
              if (target.toLowerCase() === 'surge') {
                const { module, script } = convertToSurge(content, inputFile);
                
                // Write the module file
                fs.writeFileSync(path.join(outputDirectory, `${filename}.sgmodule`), module);
                
                // If script content exists, write it too
                if (script) {
                  fs.writeFileSync(path.join(outputDirectory, `${filename}.js`), script);
                }
                
                console.log(`Successfully converted ${inputFile} to Surge format in ${outputDirectory}`);
              } else if (target.toLowerCase() === 'loon') {
                const { plugin, script } = convertToLoon(content, inputFile);
                
                // Write the plugin file
                fs.writeFileSync(path.join(outputDirectory, `${filename}.plugin`), plugin);
                
                // If script content exists, write it too
                if (script) {
                  fs.writeFileSync(path.join(outputDirectory, `${filename}.js`), script);
                }
                
                console.log(`Successfully converted ${inputFile} to Loon format in ${outputDirectory}`);
              } else {
                console.error(`Unsupported target: ${target}. Use 'surge' or 'loon'.`);
                process.exit(1);
              }
            } catch (error) {
              console.error(`Error: ${error.message}`);
              process.exit(1);
            }
          }

          main();
          EOF
      
      - name: Create output directories
        run: |
          mkdir -p Surge
          mkdir -p Loon
      
      - name: Convert QuantumultX scripts to Surge
        run: |
          for file in QuantumultX/*.js; do
            echo "Converting $(basename "$file") to Surge format..."
            node tools/convert.js --input "$file" --output-dir "Surge" --target surge
          done
      
      - name: Convert QuantumultX scripts to Loon
        run: |
          for file in QuantumultX/*.js; do
            echo "Converting $(basename "$file") to Loon format..."
            node tools/convert.js --input "$file" --output-dir "Loon" --target loon
          done
      
      - name: Commit and push changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Add the converted files
          git add Surge/ Loon/
          
          # Commit if there are changes
          git diff-index --quiet HEAD || git commit -m "Auto convert scripts to Surge and Loon formats"
          
          # Set remote URL with token for authentication
          git remote set-url origin https://x-access-token:${{ github.token }}@github.com/${{ github.repository }}
          
          # Push 
          git push
