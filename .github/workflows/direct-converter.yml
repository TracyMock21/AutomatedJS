name: Direct Script Converter

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  convert:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Create directories
        run: |
          mkdir -p Surge
          mkdir -p Loon
      
      - name: Convert to Surge
        run: |
          for file in QuantumultX/*.js; do
            filename=$(basename "$file" .js)
            echo "Converting $filename to Surge..."
            
            # Create Surge module file with default values
            cat > "Surge/${filename}.sgmodule" << EOF
#!name=${filename}
#!desc=Converted from QuantumultX

EOF
            
            # Extract name from file and update if found
            if grep -q "name" "$file"; then
              NAME=$(grep -E "name\s*=\s*[\"']?([^\"',]+)[\"']?" "$file" | head -1 | sed -E "s/.*name\s*=\s*[\"']?([^\"',]+)[\"']?.*/\1/")
              if [ ! -z "$NAME" ]; then
                # Update the name in the file
                sed -i "s/#!name=${filename}/#!name=${NAME}/" "Surge/${filename}.sgmodule"
              fi
            fi
            
            # Extract desc from file and update if found
            if grep -q "desc" "$file"; then
              DESC=$(grep -E "desc\s*=\s*[\"']?([^\"',]+)[\"']?" "$file" | head -1 | sed -E "s/.*desc\s*=\s*[\"']?([^\"',]+)[\"']?.*/\1/")
              if [ ! -z "$DESC" ]; then
                # Update the desc in the file
                sed -i "s/#!desc=Converted from QuantumultX/#!desc=${DESC}/" "Surge/${filename}.sgmodule"
              fi
            fi
            
            # Process based on file content
            if grep -q "script-response-body\|script-request-body" "$file"; then
              # This is a response/request modification script
              
              # Extract the URL pattern
              PATTERN=$(grep -E "([^\s]+)\s+url\s+script-(response|request)-body" "$file" | head -1 | awk '{print $1}')
              
              # Determine script type
              if grep -q "script-response-body" "$file"; then
                SCRIPT_TYPE="response"
              else
                SCRIPT_TYPE="request"
              fi
              
              # Copy the actual script to a js file
              cp "$file" "Surge/${filename}.js"
              
              # Add Script section to module
              cat >> "Surge/${filename}.sgmodule" << EOF
[Script]
${filename} = type=http-${SCRIPT_TYPE},pattern=${PATTERN},requires-body=1,max-size=0,script-path=${filename}.js

EOF
            elif grep -q "\$task.fetch\|\$done" "$file"; then
              # This is likely a task/cron script
              
              # Copy the script with API replacements
              sed 's/\$task\.fetch/\$httpClient.get/g; s/\$prefs\.valueForKey/\$persistentStore.read/g; s/\$prefs\.setValueForKey/\$persistentStore.write/g; s/\$notify/\$notification.post/g' "$file" > "Surge/${filename}.js"
              
              # Add Script section to module
              cat >> "Surge/${filename}.sgmodule" << EOF
[Script]
${filename} = type=cron,cronexp=0 0 * * *,wake-system=1,timeout=60,script-path=${filename}.js

EOF
            elif grep -q "hostname\|url reject\|url 302" "$file"; then
              # This is a rewrite/reject rule file
              
              # Check for MITM section
              if grep -q "hostname" "$file"; then
                # Extract hostnames, replacing single quotes with nothing
                HOSTNAMES=$(grep -E "hostname\s*=\s*(.*)" "$file" | head -1 | sed -E "s/hostname\s*=\s*(.*)/\1/" | sed "s/'//g")
                
                # Add MITM section if hostnames found
                if [ ! -z "$HOSTNAMES" ]; then
                  cat >> "Surge/${filename}.sgmodule" << EOF
[MITM]
hostname = %APPEND% ${HOSTNAMES}

EOF
                fi
              fi
              
              # Check for URL rejects
              if grep -q "url reject" "$file"; then
                cat >> "Surge/${filename}.sgmodule" << EOF
[URL Rewrite]
EOF
                # Extract and add reject rules
                grep -E "([^\s]+)\s+url\s+reject" "$file" | while read -r line; do
                  URL_PATTERN=$(echo "$line" | awk '{print $1}')
                  echo "${URL_PATTERN} - reject" >> "Surge/${filename}.sgmodule"
                done
                echo "" >> "Surge/${filename}.sgmodule"
              fi
              
              # Check for URL redirects
              if grep -q "url 30[27]" "$file"; then
                # Add URL Rewrite section if not already added
                if ! grep -q "\[URL Rewrite\]" "Surge/${filename}.sgmodule"; then
                  cat >> "Surge/${filename}.sgmodule" << EOF
[URL Rewrite]
EOF
                fi
                
                # Extract and add redirect rules
                grep -E "([^\s]+)\s+url\s+30[27]\s+([^\s]+)" "$file" | while read -r line; do
                  FROM=$(echo "$line" | awk '{print $1}')
                  TO=$(echo "$line" | awk '{print $4}')
                  echo "${FROM} ${TO} [302]" >> "Surge/${filename}.sgmodule"
                done
                echo "" >> "Surge/${filename}.sgmodule"
              fi
            else
              # If we can't determine the type, just copy the script
              cp "$file" "Surge/${filename}.js"
              
              # Add generic Script section
              cat >> "Surge/${filename}.sgmodule" << EOF
[Script]
${filename} = type=cron,cronexp=0 0 * * *,wake-system=1,timeout=60,script-path=${filename}.js

EOF
            fi
          done
      
      - name: Convert to Loon
        run: |
          for file in QuantumultX/*.js; do
            filename=$(basename "$file" .js)
            echo "Converting $filename to Loon..."
            
            # Create Loon plugin file with default values
            cat > "Loon/${filename}.plugin" << EOF
#!name = ${filename}
#!desc = Converted from QuantumultX
#!author = Converted
#!icon = 

EOF
            
            # Extract name from file and update if found
            if grep -q "name" "$file"; then
              NAME=$(grep -E "name\s*=\s*[\"']?([^\"',]+)[\"']?" "$file" | head -1 | sed -E "s/.*name\s*=\s*[\"']?([^\"',]+)[\"']?.*/\1/")
              if [ ! -z "$NAME" ]; then
                # Update the name in the file
                sed -i "s/#!name = ${filename}/#!name = ${NAME}/" "Loon/${filename}.plugin"
              fi
            fi
            
            # Extract desc from file and update if found
            if grep -q "desc" "$file"; then
              DESC=$(grep -E "desc\s*=\s*[\"']?([^\"',]+)[\"']?" "$file" | head -1 | sed -E "s/.*desc\s*=\s*[\"']?([^\"',]+)[\"']?.*/\1/")
              if [ ! -z "$DESC" ]; then
                # Update the desc in the file
                sed -i "s/#!desc = Converted from QuantumultX/#!desc = ${DESC}/" "Loon/${filename}.plugin"
              fi
            fi
            
            # Process based on file content
            if grep -q "script-response-body\|script-request-body" "$file"; then
              # This is a response/request modification script
              
              # Extract the URL pattern
              PATTERN=$(grep -E "([^\s]+)\s+url\s+script-(response|request)-body" "$file" | head -1 | awk '{print $1}')
              
              # Determine script type
              if grep -q "script-response-body" "$file"; then
                SCRIPT_TYPE="response"
              else
                SCRIPT_TYPE="request"
              fi
              
              # Copy the actual script to a js file
              cp "$file" "Loon/${filename}.js"
              
              # Add Script section to plugin
              cat >> "Loon/${filename}.plugin" << EOF
[Script]
http-${SCRIPT_TYPE} ${PATTERN} script-path=${filename}.js,requires-body=true,tag=${filename}

EOF
            elif grep -q "\$task.fetch\|\$done" "$file"; then
              # This is likely a task/cron script
              
              # Copy the script with API replacements
              sed 's/\$task\.fetch/\$http.get/g; s/\$prefs\.valueForKey/\$persistentStore.read/g; s/\$prefs\.setValueForKey/\$persistentStore.write/g; s/\$notify/\$notification.post/g' "$file" > "Loon/${filename}.js"
              
              # Add Script section to plugin
              cat >> "Loon/${filename}.plugin" << EOF
[Script]
cron "${filename}" script-path=${filename}.js,tag=${filename},cronexp=0 0 * * *

EOF
            elif grep -q "hostname\|url reject\|url 302" "$file"; then
              # This is a rewrite/reject rule file
              
              # Check for MITM section
              if grep -q "hostname" "$file"; then
                # Extract hostnames, replacing single quotes with nothing
                HOSTNAMES=$(grep -E "hostname\s*=\s*(.*)" "$file" | head -1 | sed -E "s/hostname\s*=\s*(.*)/\1/" | sed "s/'//g")
                
                # Add MITM section if hostnames found
                if [ ! -z "$HOSTNAMES" ]; then
                  cat >> "Loon/${filename}.plugin" << EOF
[MITM]
hostname = ${HOSTNAMES}

EOF
                fi
              fi
              
              # Check for URL rejects
              if grep -q "url reject" "$file"; then
                cat >> "Loon/${filename}.plugin" << EOF
[Rewrite]
EOF
                # Extract and add reject rules
                grep -E "([^\s]+)\s+url\s+reject" "$file" | while read -r line; do
                  URL_PATTERN=$(echo "$line" | awk '{print $1}')
                  echo "${URL_PATTERN} reject" >> "Loon/${filename}.plugin"
                done
                echo "" >> "Loon/${filename}.plugin"
              fi
              
              # Check for URL redirects
              if grep -q "url 30[27]" "$file"; then
                # Add Rewrite section if not already added
                if ! grep -q "\[Rewrite\]" "Loon/${filename}.plugin"; then
                  cat >> "Loon/${filename}.plugin" << EOF
[Rewrite]
EOF
                fi
                
                # Extract and add redirect rules
                grep -E "([^\s]+)\s+url\s+30[27]\s+([^\s]+)" "$file" | while read -r line; do
                  FROM=$(echo "$line" | awk '{print $1}')
                  TO=$(echo "$line" | awk '{print $4}')
                  echo "${FROM} 302 ${TO}" >> "Loon/${filename}.plugin"
                done
                echo "" >> "Loon/${filename}.plugin"
              fi
            else
              # If we can't determine the type, just copy the script
              cp "$file" "Loon/${filename}.js"
              
              # Add generic Script section
              cat >> "Loon/${filename}.plugin" << EOF
[Script]
cron "${filename}" script-path=${filename}.js,tag=${filename},cronexp=0 0 * * *

EOF
            fi
          done
          
      - name: Commit and push changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          git add Surge/ Loon/
          git diff-index --quiet HEAD || git commit -m "Auto convert scripts"
          
          git remote set-url origin https://x-access-token:${{ github.token }}@github.com/${{ github.repository }}
          git push
