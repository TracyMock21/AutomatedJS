name: QX Specialized Converter

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  convert:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Create directories
        run: |
          mkdir -p Surge
          mkdir -p Loon
      
      - name: Create specialized converter script
        run: |
          cat > qx-convert.sh << 'EOF'
          #!/bin/bash
          
          # Get filenames from command line
          INPUT_FILE=$1
          OUTPUT_SURGE=$2
          OUTPUT_LOON=$3
          
          # Get the filename without extension
          FILENAME=$(basename "$INPUT_FILE" .js)
          
          # Read the file content
          CONTENT=$(cat "$INPUT_FILE")
          
          # Extract name and description from script comment if available
          NAME="${FILENAME}"
          DESC="Converted from QuantumultX"
          
          # Try to find a better name from comments
          if grep -q "ðŸ“œ" "$INPUT_FILE"; then
            POTENTIAL_NAME=$(grep -A 1 "ðŸ“œ" "$INPUT_FILE" | tail -1 | sed 's/ðŸ“œ//g' | sed 's/^[[:space:]]*//')
            if [ ! -z "$POTENTIAL_NAME" ]; then
              NAME="$POTENTIAL_NAME"
            fi
          fi
          
          # Create Surge module
          echo "#!name=${NAME}" > "$OUTPUT_SURGE"
          echo "#!desc=${DESC}" >> "$OUTPUT_SURGE"
          echo "" >> "$OUTPUT_SURGE"
          
          # Create Loon plugin
          echo "#!name = ${NAME}" > "$OUTPUT_LOON"
          echo "#!desc = ${DESC}" >> "$OUTPUT_LOON"
          echo "#!author = Converted from QX" >> "$OUTPUT_LOON"
          echo "#!icon = " >> "$OUTPUT_LOON"
          echo "" >> "$OUTPUT_LOON"
          
          # Extract MITM hostnames
          if grep -q "\[mitm\]" "$INPUT_FILE"; then
            HOSTNAMES=$(grep -A 5 "\[mitm\]" "$INPUT_FILE" | grep "hostname" | head -1 | sed -E "s/hostname[ ]*=[ ]*(.*)/\1/" | sed 's/[[:space:]]*$//')
            
            if [ ! -z "$HOSTNAMES" ]; then
              # Add MITM section to Surge module
              echo "[MITM]" >> "$OUTPUT_SURGE"
              echo "hostname = %APPEND% ${HOSTNAMES}" >> "$OUTPUT_SURGE"
              echo "" >> "$OUTPUT_SURGE"
              
              # Add MITM section to Loon plugin
              echo "[MITM]" >> "$OUTPUT_LOON"
              echo "hostname = ${HOSTNAMES}" >> "$OUTPUT_LOON"
              echo "" >> "$OUTPUT_LOON"
            fi
          fi
          
          # Extract reject rules
          if grep -q "reject" "$INPUT_FILE"; then
            # Add URL Rewrite section to Surge
            echo "[URL Rewrite]" >> "$OUTPUT_SURGE"
            
            # Add Rewrite section to Loon
            echo "[Rewrite]" >> "$OUTPUT_LOON"
            
            # Find all lines with 'reject' and convert them
            grep -E "^[^^].*reject" "$INPUT_FILE" | while read -r line; do
              # Extract the URL pattern
              PATTERN=$(echo "$line" | awk '{print $1}')
              
              if [ ! -z "$PATTERN" ]; then
                # Add to Surge
                echo "${PATTERN} - reject" >> "$OUTPUT_SURGE"
                
                # Add to Loon
                echo "${PATTERN} reject" >> "$OUTPUT_LOON"
              fi
            done
            
            echo "" >> "$OUTPUT_SURGE"
            echo "" >> "$OUTPUT_LOON"
          fi
          
          # Extract script-response-body rules
          if grep -q "script-response-body" "$INPUT_FILE"; then
            # Prepare Script sections
            echo "[Script]" >> "$OUTPUT_SURGE"
            echo "[Script]" >> "$OUTPUT_LOON"
            
            # Find all lines with 'script-response-body' and convert them
            grep -E "url script-response-body" "$INPUT_FILE" | while read -r line; do
              # Extract the URL pattern 
              PATTERN=$(echo "$line" | awk '{print $1}')
              
              if [ ! -z "$PATTERN" ]; then
                # Copy script for Surge and Loon
                cp "$INPUT_FILE" "${OUTPUT_SURGE%.sgmodule}.js"
                cp "$INPUT_FILE" "${OUTPUT_LOON%.plugin}.js"
                
                # Add script reference to Surge
                echo "${FILENAME} = type=http-response,pattern=${PATTERN},requires-body=1,max-size=0,script-path=${FILENAME}.js" >> "$OUTPUT_SURGE"
                
                # Add script reference to Loon
                echo "http-response ${PATTERN} script-path=${FILENAME}.js,requires-body=true,tag=${FILENAME}" >> "$OUTPUT_LOON"
              fi
            done
            
            echo "" >> "$OUTPUT_SURGE"
            echo "" >> "$OUTPUT_LOON"
          fi
          
          # Always include the original script as a comment for reference
          echo "/* Original QuantumultX Configuration" >> "$OUTPUT_SURGE"
          grep -E "\[(rewrite|mitm|filter).*\]" -A 20 "$INPUT_FILE" | sed '/^\s*$/q' >> "$OUTPUT_SURGE"
          echo "*/" >> "$OUTPUT_SURGE"
          
          echo "/* Original QuantumultX Configuration" >> "$OUTPUT_LOON"
          grep -E "\[(rewrite|mitm|filter).*\]" -A 20 "$INPUT_FILE" | sed '/^\s*$/q' >> "$OUTPUT_LOON"
          echo "*/" >> "$OUTPUT_LOON"
          EOF
          
          chmod +x qx-convert.sh
      
      - name: Convert scripts
        run: |
          for file in QuantumultX/*.js; do
            filename=$(basename "$file" .js)
            echo "Converting $filename..."
            ./qx-convert.sh "$file" "Surge/${filename}.sgmodule" "Loon/${filename}.plugin"
          done
      
      - name: Commit and push changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          git add Surge/ Loon/
          git diff-index --quiet HEAD || git commit -m "Auto convert scripts"
          
          git remote set-url origin https://x-access-token:${{ github.token }}@github.com/${{ github.repository }}
          git push
