name: Simple Platform Converter

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  extract-and-convert:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Create directories
        run: mkdir -p Surge Loon
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      
      - name: Determine folder name
        id: folders
        run: |
          # Check which folder exists and set it as a variable
          if [ -d "QuantumultX" ]; then
            echo "QX_FOLDER=QuantumultX" >> $GITHUB_OUTPUT
            echo "Using folder: QuantumultX"
          elif [ -d "QuantumultxX" ]; then
            echo "QX_FOLDER=QuantumultxX" >> $GITHUB_OUTPUT
            echo "Using folder: QuantumultxX"
          else
            # List directories to help troubleshoot
            echo "Available directories:"
            ls -la
            echo "QX_FOLDER=QuantumultX" >> $GITHUB_OUTPUT
            echo "WARNING: Neither folder found, defaulting to QuantumultX"
          fi
      
      - name: Process scripts for Surge
        run: |
          QX_FOLDER="${{ steps.folders.outputs.QX_FOLDER }}"
          echo "Processing Surge templates..."
          
          for file in "$QX_FOLDER"/*.js; do
            if [ -f "$file" ]; then
              filename=$(basename "$file" .js)
              echo "Converting $filename to Surge..."
              
              # Extract name and description if available
              NAME=$(grep -o 'name\s*=\s*["\x27]*[^"\x27,]*["\x27,]*' "$file" | head -1 | sed 's/name\s*=\s*["\x27]*\([^"\x27,]*\)["\x27,]*/\1/')
              DESC=$(grep -o 'desc\s*=\s*["\x27]*[^"\x27,]*["\x27,]*' "$file" | head -1 | sed 's/desc\s*=\s*["\x27]*\([^"\x27,]*\)["\x27,]*/\1/')
              CATEGORY=$(grep -o 'category\s*=\s*["\x27]*[^"\x27,]*["\x27,]*' "$file" | head -1 | sed 's/category\s*=\s*["\x27]*\([^"\x27,]*\)["\x27,]*/\1/')
              AUTHOR=$(grep -o 'author\s*=\s*["\x27]*[^"\x27,]*["\x27,]*' "$file" | head -1 | sed 's/author\s*=\s*["\x27]*\([^"\x27,]*\)["\x27,]*/\1/')
              
              # Set defaults if not found
              [ -z "$NAME" ] && NAME="$filename"
              [ -z "$DESC" ] && DESC="模块"
              [ -z "$CATEGORY" ] && CATEGORY="🔐APP"
              [ -z "$AUTHOR" ] && AUTHOR="🅜ⓘ🅚ⓔ🅟ⓗ🅘ⓔ"
              
              # Extract hostname if available
              HOSTNAME=$(grep -o 'hostname\s*=\s*[^"]*' "$file" | head -1 | sed 's/hostname\s*=\s*//')
              [ -z "$HOSTNAME" ] && HOSTNAME="example.com"
              
              # Create Surge module header
              cat > "Surge/${filename}.sgmodule" << EOF
          #!name = ${NAME}
          #!desc=${DESC}
          #!category=${CATEGORY}
          #!author=${AUTHOR}
          EOF
              
              # Extract filter_local content
              if grep -q "\[filter_local\]" "$file"; then
                echo -e "\n[Rule]" >> "Surge/${filename}.sgmodule"
                grep -A 100 "\[filter_local\]" "$file" | sed -n '/\[filter_local\]/,/^\s*$/p' | grep -v "\[filter_local\]" | grep -v "^\s*$" | while read -r line; do
                  if [[ ! -z "$line" && ! "$line" =~ ^# ]]; then
                    echo "$line" >> "Surge/${filename}.sgmodule"
                  fi
                done
                echo "" >> "Surge/${filename}.sgmodule"
              fi
              
              # Extract and process rewrite_local content
              if grep -q "\[rewrite_local\]" "$file"; then
                MAP_LOCAL_ADDED=false
                URL_REWRITE_ADDED=false
                
                # Process each line in rewrite_local
                grep -A 200 "\[rewrite_local\]" "$file" | sed -n '/\[rewrite_local\]/,/^\s*$/p' | grep -v "\[rewrite_local\]" | grep -v "^\s*$" | while read -r line; do
                  if [[ ! -z "$line" && ! "$line" =~ ^# ]]; then
                    # Check if it's a script-response-body line
                    if [[ "$line" == *"script-response-body"* ]]; then
                      # Extract pattern and script
                      PATTERN=$(echo "$line" | awk '{print $1}')
                      SCRIPT_URL=$(echo "$line" | grep -o 'script-response-body\s\+\S\+' | awk '{print $2}')
                      SCRIPT_NAME=$(basename "$SCRIPT_URL" .js)
                      
                      # Add Script section if not already added
                      if ! grep -q "\[Script\]" "Surge/${filename}.sgmodule"; then
                        echo -e "\n[Script]" >> "Surge/${filename}.sgmodule"
                      fi
                      
                      # Add script entry
                      echo "${SCRIPT_NAME} = type=http-response, pattern=${PATTERN}, script-path=${SCRIPT_URL}, requires-body=true, max-size=-1, timeout=60" >> "Surge/${filename}.sgmodule"
                    elif [[ "$line" == *" reject"* || "$line" == *" reject-"* ]]; then
                      # Extract pattern
                      PATTERN=$(echo "$line" | awk '{print $1}')
                      
                      # Check if it should go to Map Local
                      if [[ "$PATTERN" == *"/api/"* || "$PATTERN" == *".json"* || "$PATTERN" == *"/ad"* || "$PATTERN" == *"/ads/"* || "$PATTERN" == *"advert"* ]]; then
                        # Add Map Local section if not already added
                        if [ "$MAP_LOCAL_ADDED" = false ]; then
                          echo -e "\n[Map Local]" >> "Surge/${filename}.sgmodule"
                          MAP_LOCAL_ADDED=true
                        fi
                        # Add Map Local entry
                        echo "${PATTERN} data-type=text data=\"{}\" status-code=200" >> "Surge/${filename}.sgmodule"
                      else
                        # Add URL Rewrite section if not already added
                        if [ "$URL_REWRITE_ADDED" = false ]; then
                          echo -e "\n[URL Rewrite]" >> "Surge/${filename}.sgmodule"
                          URL_REWRITE_ADDED=true
                        fi
                        # Add URL Rewrite entry
                        echo "${PATTERN} - reject" >> "Surge/${filename}.sgmodule"
                      fi
                    fi
                  fi
                done
                echo "" >> "Surge/${filename}.sgmodule"
              fi
              
              # Add MITM section
              echo -e "\n[MITM]\nhostname = %APPEND% ${HOSTNAME}" >> "Surge/${filename}.sgmodule"
            fi
          done
          
      - name: Process scripts for Loon
        run: |
          QX_FOLDER="${{ steps.folders.outputs.QX_FOLDER }}"
          echo "Processing Loon templates..."
          
          for file in "$QX_FOLDER"/*.js; do
            if [ -f "$file" ]; then
              filename=$(basename "$file" .js)
              echo "Converting $filename to Loon..."
              
              # Extract name and description if available
              NAME=$(grep -o 'name\s*=\s*["\x27]*[^"\x27,]*["\x27,]*' "$file" | head -1 | sed 's/name\s*=\s*["\x27]*\([^"\x27,]*\)["\x27,]*/\1/')
              DESC=$(grep -o 'desc\s*=\s*["\x27]*[^"\x27,]*["\x27,]*' "$file" | head -1 | sed 's/desc\s*=\s*["\x27]*\([^"\x27,]*\)["\x27,]*/\1/')
              CATEGORY=$(grep -o 'category\s*=\s*["\x27]*[^"\x27,]*["\x27,]*' "$file" | head -1 | sed 's/category\s*=\s*["\x27]*\([^"\x27,]*\)["\x27,]*/\1/')
              AUTHOR=$(grep -o 'author\s*=\s*["\x27]*[^"\x27,]*["\x27,]*' "$file" | head -1 | sed 's/author\s*=\s*["\x27]*\([^"\x27,]*\)["\x27,]*/\1/')
              ICON=$(grep -o 'icon\s*=\s*["\x27]*[^"\x27,]*["\x27,]*' "$file" | head -1 | sed 's/icon\s*=\s*["\x27]*\([^"\x27,]*\)["\x27,]*/\1/')
              
              # Set defaults if not found
              [ -z "$NAME" ] && NAME="$filename"
              [ -z "$DESC" ] && DESC="插件"
              [ -z "$CATEGORY" ] && CATEGORY="🔐APP"
              [ -z "$AUTHOR" ] && AUTHOR="🅜ⓘ🅚ⓔ🅟ⓗ🅘ⓔ"
              [ -z "$ICON" ] && ICON="https://raw.githubusercontent.com/Mikephie/icons/main/icon/${filename}.png"
              
              # Extract hostname if available
              HOSTNAME=$(grep -o 'hostname\s*=\s*[^"]*' "$file" | head -1 | sed 's/hostname\s*=\s*//')
              [ -z "$HOSTNAME" ] && HOSTNAME="example.com"
              
              # Create Loon plugin header
              cat > "Loon/${filename}.plugin" << EOF
          #!name = ${NAME}
          #!desc=${DESC}
          #!icon=${ICON}
          #!author=${AUTHOR}
          #!category=${CATEGORY}
          EOF
              
              # Extract filter_local content
              if grep -q "\[filter_local\]" "$file"; then
                echo -e "\n[Rule]" >> "Loon/${filename}.plugin"
                grep -A 100 "\[filter_local\]" "$file" | sed -n '/\[filter_local\]/,/^\s*$/p' | grep -v "\[filter_local\]" | grep -v "^\s*$" | while read -r line; do
                  if [[ ! -z "$line" && ! "$line" =~ ^# ]]; then
                    echo "$line" >> "Loon/${filename}.plugin"
                  fi
                done
                echo "" >> "Loon/${filename}.plugin"
              fi
              
              # Extract and process rewrite_local content
              if grep -q "\[rewrite_local\]" "$file"; then
                URL_REWRITE_ADDED=false
                
                # Process each line in rewrite_local
                grep -A 200 "\[rewrite_local\]" "$file" | sed -n '/\[rewrite_local\]/,/^\s*$/p' | grep -v "\[rewrite_local\]" | grep -v "^\s*$" | while read -r line; do
                  if [[ ! -z "$line" && ! "$line" =~ ^# ]]; then
                    # Check if it's a script-response-body line
                    if [[ "$line" == *"script-response-body"* ]]; then
                      # Extract pattern and script
                      PATTERN=$(echo "$line" | awk '{print $1}')
                      SCRIPT_URL=$(echo "$line" | grep -o 'script-response-body\s\+\S\+' | awk '{print $2}')
                      
                      # Add Script section if not already added
                      if ! grep -q "\[Script\]" "Loon/${filename}.plugin"; then
                        echo -e "\n[Script]" >> "Loon/${filename}.plugin"
                      fi
                      
                      # Add script entry
                      echo "http-response ${PATTERN} script-path=${SCRIPT_URL}, requires-body=true, timeout=60, tag=${filename}" >> "Loon/${filename}.plugin"
                    elif [[ "$line" == *" reject"* || "$line" == *" reject-"* ]]; then
                      # Extract pattern
                      PATTERN=$(echo "$line" | awk '{print $1}')
                      
                      # Add URL Rewrite section if not already added
                      if [ "$URL_REWRITE_ADDED" = false ]; then
                        echo -e "\n[URL Rewrite]" >> "Loon/${filename}.plugin"
                        URL_REWRITE_ADDED=true
                      fi
                      
                      # Add URL Rewrite entry
                      echo "${PATTERN} reject" >> "Loon/${filename}.plugin"
                    fi
                  fi
                done
                echo "" >> "Loon/${filename}.plugin"
              fi
              
              # Add MITM section
              echo -e "\n[MITM]\nhostname = ${HOSTNAME}" >> "Loon/${filename}.plugin"
            fi
          done
      
      - name: Commit and push changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add Surge/ Loon/
          git diff-index --quiet HEAD || git commit -m "Auto-generate templates with direct shell conversion" || echo "No changes to commit"
          git push || echo "Nothing to push"8
