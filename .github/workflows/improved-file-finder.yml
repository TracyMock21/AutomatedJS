name: Improved File Finder

on:
  workflow_dispatch:
    inputs:
      filename:
        description: 'Script filename without extension (e.g., "ads" for ads.js)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  convert-single-script:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Debug repository structure
        run: |
          echo "Repository structure:"
          find . -type f -name "*.js" | sort
          echo "--------------------"
          
      - name: Create directories
        run: |
          mkdir -p Surge Loon
      
      - name: Find file with enhanced fuzzy matching
        id: find_file
        run: |
          FILENAME="${{ github.event.inputs.filename }}"
          echo "Looking for files matching: *${FILENAME}*.js"
          
          # Search with find and rank by relevance (shortest path first)
          FILE_PATH=$(find . -name "*${FILENAME}*.js" -type f | sort -r | head -1)
          
          if [ -z "$FILE_PATH" ]; then
            echo "No exact match found, trying case-insensitive search..."
            FILE_PATH=$(find . -iname "*${FILENAME}*.js" -type f | sort -r | head -1)
          fi
          
          if [ -z "$FILE_PATH" ]; then
            echo "Could not find any file matching: ${FILENAME}"
            echo "Available JS files:"
            find . -name "*.js" -type f
            exit 1
          fi
          
          echo "Found file: $FILE_PATH"
          echo "file_path=$FILE_PATH" >> $GITHUB_OUTPUT
      
      - name: Process script with Node.js for metadata and pattern extraction
        run: |
          FILE_PATH="${{ steps.find_file.outputs.file_path }}"
          FILENAME=$(basename "$FILE_PATH" .js)
          echo "Processing file: $FILE_PATH with basename: $FILENAME"
          
          # Use Node.js for robust parsing
          cat > extract.js << 'EOF'
          const fs = require('fs');
          const path = require('path');

          const filePath = process.argv[2];
          const filename = path.basename(filePath, '.js');
          const content = fs.readFileSync(filePath, 'utf8');

          // Default values
          let metadata = {
            name: filename,
            desc: '模块',
            category: '🔐APP',
            author: '🅜ⓘ🅚ⓔ🅟ⓗ🅘ⓔ',
            hostname: 'example.com',
            icon: `https://raw.githubusercontent.com/Mikephie/icons/main/icon/${filename}.png`
          };
          let urlPattern = '^https?://example.com/';

          // Robust metadata extraction
          const lines = content.split('\n');
          for (const line of lines) {
            const trimmed = line.trim();
            if (trimmed.startsWith('//') || trimmed.startsWith('#')) continue; // Skip comments
            
            const match = trimmed.match(/(\w+)\s*=\s*["']?([^"',\n]+)["']?,?/);
            if (match) {
              const key = match[1].toLowerCase();
              const value = match[2];
              if (['name', 'desc', 'category', 'author', 'hostname', 'icon'].includes(key)) {
                metadata[key] = value;
              }
            }
            // Extract URL pattern from rewrite_local or similar sections
            if (trimmed.includes('script-response-body') || trimmed.includes('http-response')) {
              const patternMatch = trimmed.match(/^\s*([^\s]+)\s+.*script-(response|request)-body/);
              if (patternMatch) urlPattern = patternMatch[1];
            }
          }

          // Output results
          console.log(`NAME=${metadata.name}`);
          console.log(`DESC=${metadata.desc}`);
          console.log(`CATEGORY=${metadata.category}`);
          console.log(`AUTHOR=${metadata.author}`);
          console.log(`HOSTNAME=${metadata.hostname}`);
          console.log(`ICON=${metadata.icon}`);
          console.log(`URL_PATTERN=${urlPattern}`);
          EOF
          
          # Run the extraction script
          node extract.js "$FILE_PATH" > extracted_metadata.txt
          
          # Source the extracted metadata
          . ./extracted_metadata.txt
          
          # Create Surge module
          cat > "Surge/${FILENAME}.sgmodule" << EOF
          #!name = ${NAME}
          #!desc = ${DESC}
          #!category = ${CATEGORY}
          #!author = ${AUTHOR}
          
          [Script]
          ${FILENAME} = type=http-response, pattern=${URL_PATTERN}, script-path=https://raw.githubusercontent.com/Mikephie/Script/main/qx/${FILENAME}.js, requires-body=true, max-size=-1, timeout=60
          
          [MITM]
          hostname = %APPEND% ${HOSTNAME}
          EOF
          
          # Create Loon plugin
          cat > "Loon/${FILENAME}.plugin" << EOF
          #!name = ${NAME}
          #!desc = ${DESC}
          #!icon = ${ICON}
          #!author = ${AUTHOR}
          #!category = ${CATEGORY}
          
          [Script]
          http-response ${URL_PATTERN} script-path=https://raw.githubusercontent.com/Mikephie/Script/main/qx/${FILENAME}.js, requires-body=true, timeout=60, tag=${FILENAME}
          
          [MITM]
          hostname = ${HOSTNAME}
          EOF
          
          echo "Successfully created Surge module: Surge/${FILENAME}.sgmodule"
          echo "Successfully created Loon plugin: Loon/${FILENAME}.plugin"
      
      - name: Commit and push changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add Surge/ Loon/
          git diff-index --quiet HEAD || git commit -m "Convert script: ${{ github.event.inputs.filename }}" || echo "No changes to commit"
          git push || echo "Nothing to push"
