name: Improved File Finder

on:
  workflow_dispatch:
    inputs:
      filename:
        description: 'Script filename without extension (e.g., "ads" for ads.js)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  convert-single-script:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Debug repository structure
        run: |
          echo "Repository structure:"
          find . -type f -name "*.js" | sort
          echo "--------------------"
          
      - name: Create directories
        run: |
          mkdir -p Surge Loon
      
      - name: Find file with fuzzy matching
        id: find_file
        run: |
          FILENAME="${{ github.event.inputs.filename }}"
          echo "Looking for files matching: *${FILENAME}*.js"
          
          # Search with find command
          FILE_PATH=$(find . -name "*${FILENAME}*.js" -type f | head -1)
          
          if [ -z "$FILE_PATH" ]; then
            echo "No exact match found, trying case-insensitive search..."
            FILE_PATH=$(find . -iname "*${FILENAME}*.js" -type f | head -1)
          fi
          
          if [ -z "$FILE_PATH" ]; then
            echo "Could not find any file matching: ${FILENAME}"
            echo "Available JS files:"
            find . -name "*.js" -type f
            exit 1
          fi
          
          echo "Found file: $FILE_PATH"
          echo "file_path=$FILE_PATH" >> $GITHUB_OUTPUT
      
      - name: Process for Surge
        run: |
          FILE_PATH="${{ steps.find_file.outputs.file_path }}"
          FILENAME=$(basename "$FILE_PATH" .js)
          echo "Processing file: $FILE_PATH with basename: $FILENAME"
          
          # Extract basic metadata and hostname
          NAME=$(grep -o 'name\s*=\s*["\x27]*[^"\x27,]*["\x27,]*' "$FILE_PATH" | head -1 | sed 's/name\s*=\s*["\x27]*\([^"\x27,]*\)["\x27,]*/\1/' || echo "${FILENAME}")
          DESC=$(grep -o 'desc\s*=\s*["\x27]*[^"\x27,]*["\x27,]*' "$FILE_PATH" | head -1 | sed 's/desc\s*=\s*["\x27]*\([^"\x27,]*\)["\x27,]*/\1/' || echo "模块")
          CATEGORY=$(grep -o 'category\s*=\s*["\x27]*[^"\x27,]*["\x27,]*' "$FILE_PATH" | head -1 | sed 's/category\s*=\s*["\x27]*\([^"\x27,]*\)["\x27,]*/\1/' || echo "🔐APP")
          AUTHOR=$(grep -o 'author\s*=\s*["\x27]*[^"\x27,]*["\x27,]*' "$FILE_PATH" | head -1 | sed 's/author\s*=\s*["\x27]*\([^"\x27,]*\)["\x27,]*/\1/' || echo "🅜ⓘ🅚ⓔ🅟ⓗ🅘ⓔ")
          HOSTNAME=$(grep -o 'hostname\s*=\s*[^"]*' "$FILE_PATH" | head -1 | sed 's/hostname\s*=\s*//' || echo "example.com")
          
          echo "Creating Surge module with basic metadata..."
          
          # Create basic Surge module
          cat > "Surge/${FILENAME}.sgmodule" << EOF
          #!name = ${NAME}
          #!desc=${DESC}
          #!category=${CATEGORY}
          #!author=${AUTHOR}
          
          [Script]
          ${FILENAME} = type=http-response, pattern=^https?://example.com/, script-path=https://raw.githubusercontent.com/Mikephie/Script/main/qx/${FILENAME}.js, requires-body=true, max-size=-1, timeout=60
          
          [MITM]
          hostname = %APPEND% ${HOSTNAME}
          EOF
          
          echo "Successfully created Surge module: Surge/${FILENAME}.sgmodule"
          
      - name: Process for Loon
        run: |
          FILE_PATH="${{ steps.find_file.outputs.file_path }}"
          FILENAME=$(basename "$FILE_PATH" .js)
          echo "Processing file: $FILE_PATH with basename: $FILENAME"
          
          # Extract basic metadata and hostname
          NAME=$(grep -o 'name\s*=\s*["\x27]*[^"\x27,]*["\x27,]*' "$FILE_PATH" | head -1 | sed 's/name\s*=\s*["\x27]*\([^"\x27,]*\)["\x27,]*/\1/' || echo "${FILENAME}")
          DESC=$(grep -o 'desc\s*=\s*["\x27]*[^"\x27,]*["\x27,]*' "$FILE_PATH" | head -1 | sed 's/desc\s*=\s*["\x27]*\([^"\x27,]*\)["\x27,]*/\1/' || echo "插件")
          CATEGORY=$(grep -o 'category\s*=\s*["\x27]*[^"\x27,]*["\x27,]*' "$FILE_PATH" | head -1 | sed 's/category\s*=\s*["\x27]*\([^"\x27,]*\)["\x27,]*/\1/' || echo "🔐APP")
          AUTHOR=$(grep -o 'author\s*=\s*["\x27]*[^"\x27,]*["\x27,]*' "$FILE_PATH" | head -1 | sed 's/author\s*=\s*["\x27]*\([^"\x27,]*\)["\x27,]*/\1/' || echo "🅜ⓘ🅚ⓔ🅟ⓗ🅘ⓔ")
          ICON=$(grep -o 'icon\s*=\s*["\x27]*[^"\x27,]*["\x27,]*' "$FILE_PATH" | head -1 | sed 's/icon\s*=\s*["\x27]*\([^"\x27,]*\)["\x27,]*/\1/' || echo "https://raw.githubusercontent.com/Mikephie/icons/main/icon/${FILENAME}.png")
          HOSTNAME=$(grep -o 'hostname\s*=\s*[^"]*' "$FILE_PATH" | head -1 | sed 's/hostname\s*=\s*//' || echo "example.com")
          
          echo "Creating Loon plugin with basic metadata..."
          
          # Create basic Loon plugin
          cat > "Loon/${FILENAME}.plugin" << EOF
          #!name = ${NAME}
          #!desc=${DESC}
          #!icon=${ICON}
          #!author=${AUTHOR}
          #!category=${CATEGORY}
          
          [Script]
          http-response ^https?://example.com/ script-path=https://raw.githubusercontent.com/Mikephie/Script/main/qx/${FILENAME}.js, requires-body=true, timeout=60, tag=${FILENAME}
          
          [MITM]
          hostname = ${HOSTNAME}
          EOF
          
          echo "Successfully created Loon plugin: Loon/${FILENAME}.plugin"
      
      - name: Extract URL pattern from script
        run: |
          FILE_PATH="${{ steps.find_file.outputs.file_path }}"
          FILENAME=$(basename "$FILE_PATH" .js)
          echo "Attempting to extract URL pattern..."
          
          # Try to extract URL pattern from rewrite_local section
          if grep -q "\[rewrite_local\]" "$FILE_PATH"; then
            URL_PATTERN=$(grep -A 50 "\[rewrite_local\]" "$FILE_PATH" | grep "script-response-body" | head -1 | awk '{print $1}')
            
            if [ ! -z "$URL_PATTERN" ]; then
              echo "Found URL pattern: $URL_PATTERN"
              
              # Update Surge module
              sed -i "s|pattern=\^https?://example\.com/|pattern=${URL_PATTERN}|" "Surge/${FILENAME}.sgmodule"
              
              # Update Loon plugin
              sed -i "s|http-response \^https?://example\.com/|http-response ${URL_PATTERN}|" "Loon/${FILENAME}.plugin"
              
              echo "Updated pattern in both files"
            else
              echo "No URL pattern found in rewrite_local section"
            fi
          else
            echo "No rewrite_local section found"
          fi
      
      - name: Commit and push changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add Surge/ Loon/
          git diff-index --quiet HEAD || git commit -m "Convert script: ${{ github.event.inputs.filename }}" || echo "No changes to commit"
          git push || echo "Nothing to push"
